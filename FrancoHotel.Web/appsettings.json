{
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*",
    "ErrorMessages": {
        "ErrorPisoRepository": {
            "GetPisoByEstado": "Error obteniendo los pisos por estado"
        },
        "ErrorClienteRepository": {
            "GetClienteByDocumento": "El documento no puede estar vacío o ser nulo.",
            "GetClientesByEstado": "Error obteniendo los clientes por estado.",
            "Exists": "Error verificando la existencia del cliente.",
            "GetAllAsync": "Error obteniendo todos los clientes.",
            "GetEntityByIdAsync": "Error obteniendo el cliente por ID.",
            "SaveEntityAsync": {
                "InvalidId": "El ID generado para el cliente no es válido.",
                "NullEntity": "El cliente no puede ser nulo.",
                "TipoDocumentoExceeded": "El campo TipoDocumento no puede exceder los 15 caracteres.",
                "DocumentoExceeded": "El campo Documento no puede exceder los 15 caracteres.",
                "NombreCompletoExceeded": "El campo NombreCompleto no puede exceder los 50 caracteres.",
                "CorreoExceeded": "El campo Correo no puede exceder los 50 caracteres.",
                "SaveSuccess": "Cliente guardado correctamente.",
                "SaveError": "Ocurrió un error al guardar el cliente."
            },
            "UpdateEntityAsync": {
                "NullEntity": "El cliente no puede ser nulo.",
                "InvalidId": "El ID del cliente debe ser mayor que cero.",
                "TipoDocumentoExceeded": "El campo TipoDocumento no puede exceder los 15 caracteres.",
                "DocumentoExceeded": "El campo Documento no puede exceder los 15 caracteres.",
                "NombreCompletoExceeded": "El campo NombreCompleto no puede exceder los 50 caracteres.",
                "CorreoExceeded": "El campo Correo no puede exceder los 50 caracteres.",
                "UpdateSuccess": "Cliente actualizado correctamente.",
                "UpdateError": "Ocurrió un error al actualizar el cliente."
            },
            "UpdateTipoDocumento": {
                "InvalidId": "El ID del cliente debe ser mayor que cero.",
                "NullTipoDocumento": "El nuevo tipo de documento no puede estar vacío o ser nulo.",
                "TipoDocumentoExceeded": "El campo TipoDocumento no puede exceder los 15 caracteres.",
                "NotFound": "El cliente no fue encontrado.",
                "SameTipoDocumento": "El nuevo tipo de documento es el mismo que el actual.",
                "UpdateSuccess": "Tipo de documento actualizado correctamente.",
                "UpdateError": "Ocurrió un error actualizando el tipo de documento."
            },
            "UpdateEstado": {
                "InvalidId": "El ID del cliente debe ser mayor que cero.",
                "NotFound": "El cliente no fue encontrado.",
                "SameEstado": "El nuevo estado es el mismo que el actual.",
                "UpdateSuccess": "Estado actualizado correctamente.",
                "UpdateError": "Ocurrió un error actualizando el estado del cliente."
            }
        },
        "ErrorRolUsuarioRepository": {
            "GetRolUsuarioByDescripcion": "La descripción no puede estar vacía o ser nula.",
            "GetRolesUsuarioByEstado": "Error obteniendo los roles de usuario por estado.",
            "Exists": "Error verificando la existencia del rol de usuario.",
            "GetAllAsync": "Error obteniendo todos los roles de usuario.",
            "GetEntityByIdAsync": "Error obteniendo el rol de usuario por ID.",
            "SaveEntityAsync": {
                "InvalidId": "El ID generado para el rol de usuario no es válido.",
                "NullEntity": "El rol de usuario no puede ser nulo.",
                "DescripcionExceeded": "La descripción no puede exceder los 50 caracteres.",
                "SaveSuccess": "Rol de usuario guardado correctamente.",
                "SaveError": "Ocurrió un error al guardar el rol de usuario."
            },
            "UpdateEntityAsync": {
                "NullEntity": "El rol de usuario no puede ser nulo.",
                "InvalidId": "El ID del rol de usuario debe ser mayor que cero.",
                "DescripcionExceeded": "La descripción no puede exceder los 50 caracteres.",
                "NotFound": "El rol de usuario no existe en la base de datos.",
                "UpdateSuccess": "Rol de usuario actualizado correctamente.",
                "UpdateError": "Ocurrió un error al actualizar el rol de usuario."
            },
            "UpdateDescripcion": {
                "InvalidId": "El ID del rol de usuario debe ser mayor que cero.",
                "NullDescripcion": "La nueva descripción no puede estar vacía o ser nula.",
                "DescripcionExceeded": "La descripción no puede exceder los 50 caracteres.",
                "NotFound": "Rol de usuario no encontrado.",
                "UpdateSuccess": "Descripción actualizada correctamente.",
                "UpdateError": "Ocurrió un error actualizando la descripción del rol de usuario."
            },
            "UpdateEstado": {
                "InvalidId": "El ID del rol de usuario debe ser mayor que cero.",
                "NotFound": "Rol de usuario no encontrado.",
                "UpdateSuccess": "Estado actualizado correctamente.",
                "UpdateError": "Ocurrió un error actualizando el estado del rol de usuario."
            }
        },
        "ErrorUsuarioRepository": {
            "GetUsuarioByClave": "La clave proporcionada es nula o vacía.",
            "GetUsuarioByIdRolUsuario": "El ID del rol de usuario debe ser mayor que cero.",
            "GetUsuariosByEstado": "Error obteniendo los usuarios por estado.",
            "Exists": "Error verificando la existencia del usuario.",
            "GetAllAsync": "Error obteniendo todos los usuarios.",
            "GetEntityByIdAsync": "Error obteniendo el usuario por ID.",
            "UpdateClave": {
                "InvalidId": "El ID del usuario debe ser mayor que cero.",
                "NullClave": "La nueva clave no puede estar vacía o ser nula.",
                "ClaveTooShort": "La clave debe tener al menos 8 caracteres.",
                "NotFound": "Usuario no encontrado.",
                "UpdateSuccess": "Clave actualizada correctamente.",
                "UpdateError": "Ocurrió un error actualizando la clave del usuario."
            },
            "UpdateEstado": {
                "InvalidId": "El ID del usuario debe ser mayor que cero.",
                "NotFound": "Usuario no encontrado.",
                "UpdateSuccess": "Estado actualizado correctamente.",
                "UpdateError": "Ocurrió un error actualizando el estado del usuario."
            },
            "GetUsuariosByEstadoYFechaCreacion": "Ocurrió un error al obtener los usuarios.",
            "SaveEntityAsync": {
                "InvalidId": "El ID del usuario debe ser mayor que cero.",
                "NombreCompletoExceeded": "El nombre completo no puede exceder los 50 caracteres.",
                "CorreoExceeded": "El correo no puede exceder los 50 caracteres.",
                "ClaveExceeded": "La clave no puede exceder los 50 caracteres.",
                "SaveSuccess": "Usuario guardado correctamente.",
                "SaveError": "Ocurrió un error al guardar el usuario."
            },
            "UpdateEntityAsync": {
                "InvalidId": "El ID del usuario debe ser mayor que cero.",
                "NombreCompletoExceeded": "El nombre completo no puede exceder los 50 caracteres.",
                "CorreoExceeded": "El correo no puede exceder los 50 caracteres.",
                "ClaveExceeded": "La clave no puede exceder los 50 caracteres.",
                "NotFound": "El usuario no existe en la base de datos.",
                "UpdateSuccess": "Usuario actualizado correctamente.",
                "UpdateError": "Ocurrió un error al actualizar el usuario."
            }
        }
    }
}