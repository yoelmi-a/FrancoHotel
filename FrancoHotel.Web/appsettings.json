{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "DBHotelYoelmi": "Server=NACER\\SQLEXPRESS;Database=DBHotel;Integrated Security=True;TrustServerCertificate=True;MultipleActiveResultSets=true",
    "DBHotelGerardo": "Server=DESKTOP-7789H4V\\SQLEXPRESS;Database=DBHotel;Integrated Security=True;TrustServerCertificate=True;MultipleActiveResultSets=true",
    "DbHotelEli": "Server=DESKTOP-PSE76N1;Database=DBHotel;User Id=MiUsuario;Password=MiContraseñaSegura;TrustServerCertificate=True;MultipleActiveResultSets=true"
  },
  "AllowedHosts": "*",
  "ErrorPisoRepository": {
    "GetPisoByEstado": "Error obteniendo los pisos por estado",
    "InvalidData": "Los datos del piso no son válidos",
    "RemoveEntityAsync": "Ocurrio un error al remover el piso",
    "SaveEntityAsync": "Ocurrio un error al guardar el piso",
    "UpdateEntityAsync": "Ocurrio un error al actualizar el piso"
  },
  "ErrorHabitacionRepository": {
    "RemoveEntityAsync": "Ocurrio un error al remover la habitación",
    "SaveEntityAsync": "Ocurrio un error al guardar la habitación",
    "UpdateEntityAsync": "Ocurrio un error al actualizar la habitación",
    "InvalidData": "Los datos de la habitación no son válidos"
  },
  "ErrorEstadoHabitacionRepository": {
    "RemoveEntityAsync": "Ocurrio un error al remover el estado de habitación",
    "SaveEntityAsync": "Ocurrio un error al guardar el estado de habitación",
    "UpdateEntityAsync": "Ocurrio un error al actualizar el estado de habitación",
    "InvalidData": "Los datos de el estado de habitación no son válidos"
  },
  "ErrorUsuarioRepository": {
    "InvalidData": "Datos inválidos para la operación en UsuarioRepository",
    "SaveEntityAsync": "Error al guardar el usuario",
    "UpdateEntityAsync": "Error al actualizar el usuario",
    "RemoveEntity": "Error al eliminar el usuario"
  },
  "ErrorRolUsuarioRepository": {
    "InvalidData": "Datos inválidos para la operación en RolUsuarioRepository",
    "SaveEntityAsync": "Error al guardar el rol de usuario",
    "UpdateEntityAsync": "Error al actualizar el rol de usuario",
    "RemoveEntity": "Error al eliminar el rol de usuario"
  },
  "ErrorClienteRepository": {
    "InvalidData": "Datos inválidos para la operación en ClienteRepository",
    "SaveEntityAsync": "Error al guardar el cliente",
    "UpdateEntityAsync": "Error al actualizar el cliente",
    "RemoveEntity": "Error al eliminar el cliente"
  },
  "ErrorUsuarioService": {
    "DatosInvalidos": "Los datos del usuario son inválidos",
    "NombreInvalido": "El nombre completo es inválido",
    "CorreoInvalido": "El correo es inválido",
    "UsuarioNoRegistradoOYaEliminado": "El usuario no está registrado o ya ha sido eliminado",
    "UsuarioNoEncontrado": "Usuario no encontrado",
    "RolNoExiste": "El rol de usuario no existe",
    "IdObligatorio": "El identificador de usuario es obligatorio"
  },
  "ErrorRolUsuarioService": {
    "DatosInvalidos": "Los datos del rol de usuario son inválidos",
    "DescripcionVacia": "La descripción no puede estar vacía",
    "IdObligatorio": "El identificador del rol es obligatorio",
    "RolNoEncontrado": "Rol de usuario no encontrado",
    "RolUsuarioNoRegistradoOYaEliminado": "El RolUsuario no está registrado o ya ha sido eliminado",
    "NuevaDescripcionVacia": "La nueva descripción no puede estar vacía",
    "RolNoExiste": "El rol de usuario no existe en el servicio"
  },
  "ErrorClienteService": {
    "DatosInvalidos": "Los datos del cliente son inválidos",
    "NombreInvalido": "El nombre completo es inválido",
    "DocumentoInvalido": "El documento es inválido",
    "CorreoInvalido": "El correo es inválido",
    "ClienteNoRegistradoOYaEliminado": "El cliente no está registrado o ya ha sido eliminado",
    "ClienteTipoDocumentoVacio": "El cliente es tipo de documento está vacío",
    "ClienteNoExiste": "El cliente no existe"
  },
  "ErrorRecepcionRepository": {
    "SaveEntityAsyncInvalidData": "Error al crear Recepcion por datos invalidos",
    "UpdateEntityAsyncInvalidData": "Error al actualizar Recepcion por datos invalidos",
    "RemoveEntityAsyncInvalidData": "Error al borrar Recepcion por datos invalidos",
    "SaveEntityAsync": "Error al guardar el Recepcion",
    "UpdateEntityAsync": "Error al actualizar el Recepcion",
    "RemoveEntity": "Error al eliminar el Recepcion",
    "GetClienteById": "Error obteniendo el Recepcion por ID",
    "GetAllClientes": "Error obteniendo la lista de Recepcion"
  },
  "ErrorTarifasRepository": {
    "SaveEntityAsyncInvalidData": "Error al crear Tarifas por datos invalidos",
    "UpdateEntityAsyncInvalidData": "Error al actualizar Tarifas por datos invalidos",
    "RemoveEntityAsyncInvalidData": "Error al borrar Tarifas por datos invalidos",
    "UpdateTarifaByCategoriaInvalidDara": "Error al actualizar precio de categorias por datos invalidos",
    "SaveEntityAsync": "Error al guardar el Tarifas",
    "UpdateEntityAsync": "Error al actualizar el Tarifas",
    "RemoveEntity": "Error al eliminar el Tarifas",
    "UpdateTarifaByCategoria": "Error al actualizar el precio de las categorias",
    "GetClienteById": "Error obteniendo el Tarifas por ID",
    "GetAllClientes": "Error obteniendo la lista de Tarifas"
  }
}
